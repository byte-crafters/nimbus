// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// when building for development, Nest searches for files in /dist, so for dev we need to change this value
generator client {
    provider = "prisma-client-js"
    output   = "./generated/prisma-postgres-client-js"
}

datasource postgres_db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id       String  @id @default(uuid())
    email    String  @unique
    username String  @unique
    password String?

    rootFolder   Folder? @relation("RootFolder", fields: [rootFolderId], references: [id])
    rootFolderId String? @unique

    file   File[]   @relation(name: "FileOwner")
    folder Folder[] @relation(name: "FolderOwner")

    fileAccess   FileAccess[]
    folderAccess FolderAccess[]
}

model Folder {
    rootUserOwner User? @relation("RootFolder")

    id          String   @id @default(uuid()) @map("fd_id")
    name        String?  @map("fd_name")
    path        String[] @map("fd_path")
    removed     Boolean  @default(false) @map("fd_removed")
    createdDate DateTime @default(now())

    parentFolder   Folder? @relation(name: "FolderParents", fields: [parentFolderId], references: [id])
    parentFolderId String?

    childrenFolders Folder[] @relation(name: "FolderParents")
    childrenFiles   File[]

    folderAccess FolderAccess[]

    owner   User?   @relation(name: "FolderOwner", fields: [ownerId], references: [id])
    ownerId String?
}

model File {
    id          String   @id @default(uuid()) @map("fl_id")
    name        String   @map("fl_name")
    extension   String   @map("fl_extension")
    removed     Boolean  @default(false) @map("fl_removed")
    createdDate DateTime @default(now())
    size        Int

    folder     Folder       @relation(fields: [folderId], references: [id])
    folderId   String
    fileAccess FileAccess[]

    owner   User?   @relation(name: "FileOwner", fields: [ownerId], references: [id])
    ownerId String?
}

model FileAccess {
    userRights Int

    file   File   @relation(fields: [fileId], references: [id])
    fileId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@id([fileId, userId])
}

model FolderAccess {
    userRights Int

    folder   Folder @relation(fields: [folderId], references: [id])
    folderId String

    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@id([folderId, userId])
}
